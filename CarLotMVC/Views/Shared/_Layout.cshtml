@*редставления в инфраструктуре MVC изображают пользовательский интерфейс на сайтах MVC. Представления MVC задуманы быть
    очень легковесными, передавая обработку серверной стороны контроллерам, а обработку клиентской стороны — сценариям
    JavaScript. Представления компоновки похожи на мастер-страницы в Web Forms: представления визуализируются внутри
    компоновки и только частичные представления визуализирую себя сами (т.е. без компоновки).
*@
<!DOCTYPE html>
@*страница Layout. cshtml — это основа того, что будет
    отображаться пользователю при визуализации представлений (использующих страницу
    _Layout. cshtml).*@
<html>
@*При работе с компоновками важно помнить о существовании двух элементов: тело и
    области. В тело будет вставляться код представления, когда представление и компоновка визуализируются
    и позиционируются в компоновке с помощью следующей строки кода Razor:

    @RenderBody()

*@
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse" title="more options">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
                <ul class=".collapse.navbar-collapse" >
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    @*Представления компоновки обычно содержат средство навигации по сайту и
                        разрабатываемому нами сайту оно также не помешает. *@
                    <li>@Html.ActionLink("Inventoгy", "Index", "Inventoгy")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
            
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")


    @*Области — это разделы страницы компоновки, которые допускают заполнение во время выполнения. Они могут быть
        обязательными или необязательными и определяются внутри страницы компоновки посредством функции RenderSection()
        из Razor. В первом аргументе указывается имя области, а во втором — считается ли область обязательной.
        Приведенная ниже строка кода в Layout. cshtml создает область по имени scripts, необязательную для представления*@
    @RenderSection("scripts", required: false)
</body>
@*Для визуализации области в представлении используется блок Razor под названием ^section. Например, следующие блоки кода
    внутри страницы Edit.cshtml, находящейся в папке Views/Inventory, добавляют к визуализируемой странице пакет
    проверки достоверности jQuery*@
</html>
@*
            Частичные представления являются такими же, как обычные представления, исключая тот факт, что они
            не применяют представление компоновки в качестве своей основы
            и полезны для инкапсуляции пользовательского интерфейса. Отличие между частичным
            представлением и полным представлением связано с тем, как они визуализируются.
            Полное представление (возвращаемое из контроллера с помощью метода View ()) будет
            использовать страницу компоновки, указанную либо в качестве стандартной в файле
            ViewStart. cshtml, либо заданную через оператор Layout в коде Razor. Представление,
            визуализируемое с применением метода PartialView() (или вспомогательного метода
            HTML по имени Partial ()), не использует стандартную компоновку, но все-таки задействует компоновку,
            если она указана посредством оператора Layout в коде Razor.

            Вдобавок к визуализации представления из метода действия с помощью
            PartialView () частичное представление можно помещать внутрь другого представления, используя вспомогательный
            метод HTML. Вот как можно было бы поместить частично представление по имени MyPartial. cshtml в другое представление:

            ©Html.Partial("MyPartial")

        При обсуждении класса InventoryController вы узнали, что методы действий способны возвращать
    данные представлению. Это делалось передачей объекта (или списка
    объектов) в метод View (). Данные, переданные в метод View (), становились моделью
    для представления.

*@
